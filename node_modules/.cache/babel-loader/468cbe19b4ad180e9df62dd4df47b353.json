{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTitle = exports.useTitle = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _isNode = _interopRequireDefault(require(\"./isNode\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar currentTitle = '';\n/**\r\n * This hook will set the window title, when a component gets mounted.\r\n * When the component gets unmounted, the previously used title will be restored.\r\n * @param {string} inString\r\n */\n\nvar useTitle = function useTitle(inString) {\n  currentTitle = inString;\n\n  if (_isNode.default) {\n    return;\n  }\n\n  _react.default.useEffect(function () {\n    var previousTitle = document.title;\n    document.title = inString;\n    return function () {\n      document.title = previousTitle;\n    };\n  });\n};\n/**\r\n * Returns the current window title to be used in a SSR context\r\n * @returns {string}\r\n */\n\n\nexports.useTitle = useTitle;\n\nvar getTitle = function getTitle() {\n  return currentTitle;\n};\n\nexports.getTitle = getTitle;","map":{"version":3,"sources":["../src/title.js"],"names":["currentTitle","useTitle","isNode","React","previousTitle","document","getTitle"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;;;;;;;AAEA,IAAIA,YAAY,GAAhB,EAAA;AAEA;;;;;;AAKO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,QAAA,EAAc;AACrCD,EAAAA,YAAY,GAAZA,QAAAA;;AAEA,MAAGE,OAAAA,CAAH,OAAA,EAAU;AACT;AACA;;AAEDC,EAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAgB,YAAM;AACrB,QAAMC,aAAa,GAAGC,QAAQ,CAA9B,KAAA;AACAA,IAAAA,QAAQ,CAARA,KAAAA,GAAAA,QAAAA;AACA,WAAO,YAAM;AACZA,MAAAA,QAAQ,CAARA,KAAAA,GAAAA,aAAAA;AADD,KAAA;AAHDF,GAAAA;AAPM,CAAA;AAgBP;;;;;;;;AAIO,IAAMG,QAAQ,GAAG,SAAXA,QAAW,GAAA;AAAA,SAAA,YAAA;AAAjB,CAAA","sourcesContent":["import React from 'react';\r\nimport isNode from './isNode';\r\n\r\nlet currentTitle = '';\r\n\r\n/**\r\n * This hook will set the window title, when a component gets mounted.\r\n * When the component gets unmounted, the previously used title will be restored.\r\n * @param {string} inString\r\n */\r\nexport const useTitle = (inString) => {\r\n\tcurrentTitle = inString;\r\n\r\n\tif(isNode){\r\n\t\treturn;\r\n\t}\r\n\r\n\tReact.useEffect(() => {\r\n\t\tconst previousTitle = document.title;\r\n\t\tdocument.title = inString;\r\n\t\treturn () => {\r\n\t\t\tdocument.title = previousTitle;\r\n\t\t};\r\n\t});\r\n};\r\n\r\n/**\r\n * Returns the current window title to be used in a SSR context\r\n * @returns {string}\r\n */\r\nexport const getTitle = () => currentTitle;\r\n"]},"metadata":{},"sourceType":"script"}