{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useQueryParams = exports.getQueryParams = exports.setQueryParams = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _isNode = _interopRequireDefault(require(\"./isNode\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar queryParamListeners = [];\nvar queryParamObject = {};\n\nvar setQueryParams = function setQueryParams(inObj) {\n  var replace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (!(inObj instanceof Object)) {\n    throw new Error('Object required');\n  }\n\n  if (replace) {\n    queryParamObject = inObj;\n  } else {\n    Object.assign(queryParamObject, inObj);\n  }\n\n  var now = Date.now();\n  queryParamListeners.forEach(function (cb) {\n    return cb(now);\n  });\n\n  if (!_isNode.default) {\n    var qs = '?' + objectToQueryString(queryParamObject);\n\n    if (qs === location.search) {\n      return;\n    }\n\n    history.replaceState(null, null, location.pathname + (qs !== '?' ? qs : ''));\n  }\n};\n\nexports.setQueryParams = setQueryParams;\n\nvar getQueryParams = function getQueryParams() {\n  return Object.assign({}, queryParamObject);\n};\n/**\r\n * This takes an URL query string and converts it into a javascript object.\r\n * @param {string} inStr\r\n * @return {object}\r\n */\n\n\nexports.getQueryParams = getQueryParams;\n\nvar queryStringToObject = function queryStringToObject(inStr) {\n  var p = new URLSearchParams(inStr);\n  var result = {};\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = p[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var param = _step.value;\n      result[param[0]] = param[1];\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return result;\n};\n/**\r\n * This takes a javascript object and turns it into a URL query string.\r\n * @param {object} inObj\r\n * @return {string}\r\n */\n\n\nvar objectToQueryString = function objectToQueryString(inObj) {\n  var qs = new URLSearchParams();\n  Object.entries(inObj).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return value !== undefined ? qs.append(key, value) : null;\n  });\n  return qs.toString();\n};\n\nif (!_isNode.default) {\n  queryParamObject = queryStringToObject(location.search.substr(1));\n}\n/**\r\n * This hook returns the currently set query parameters as object and offers a setter function\r\n * to set a new query string.\r\n *\r\n * All components that are hooked to the query parameters will get updated if they change.\r\n * Query params can also be updated along with the path, by calling `navigate(url, queryParams)`.\r\n *\r\n * @returns {array} [queryParamObject, setQueryParams]\r\n */\n\n\nvar useQueryParams = function useQueryParams() {\n  var setUpdate = _react.default.useState(0)[1];\n\n  _react.default.useEffect(function () {\n    queryParamListeners.push(setUpdate);\n    return function () {\n      var index = queryParamListeners.indexOf(setUpdate);\n\n      if (index === -1) {\n        return;\n      }\n\n      queryParamListeners.splice(index, 1);\n    };\n  }, [setUpdate]);\n\n  return [queryParamObject, setQueryParams];\n};\n\nexports.useQueryParams = useQueryParams;","map":{"version":3,"sources":["../src/queryParams.js"],"names":["queryParamListeners","queryParamObject","setQueryParams","replace","inObj","Object","now","Date","cb","isNode","qs","objectToQueryString","location","history","getQueryParams","queryStringToObject","p","result","param","key","value","useQueryParams","setUpdate","React","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport isNode from './isNode';\r\n\r\nconst queryParamListeners = [];\r\nlet queryParamObject = {};\r\n\r\nexport const setQueryParams = (inObj, replace = false) => {\r\n\tif(!(inObj instanceof Object)){\r\n\t\tthrow new Error('Object required');\r\n\t}\r\n\tif(replace){\r\n\t\tqueryParamObject = inObj;\r\n\t} else {\r\n\t\tObject.assign(queryParamObject, inObj);\r\n\t}\r\n\tconst now = Date.now();\r\n\tqueryParamListeners.forEach(cb => cb(now));\r\n\tif (!isNode) {\r\n\t\tconst qs = '?' + objectToQueryString(queryParamObject);\r\n\t\tif(qs === location.search) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\thistory.replaceState(null, null, location.pathname + (qs !== '?' ? qs : ''));\r\n\t}\r\n};\r\n\r\nexport const getQueryParams = () => Object.assign({}, queryParamObject);\r\n\r\n/**\r\n * This takes an URL query string and converts it into a javascript object.\r\n * @param {string} inStr\r\n * @return {object}\r\n */\r\nconst queryStringToObject = (inStr) => {\r\n\tconst p = new URLSearchParams(inStr);\r\n\tlet result = {};\r\n\tfor (let param of p) {\r\n\t\tresult[param[0]] = param[1];\r\n\t}\r\n\treturn result;\r\n};\r\n\r\n/**\r\n * This takes a javascript object and turns it into a URL query string.\r\n * @param {object} inObj\r\n * @return {string}\r\n */\r\nconst objectToQueryString = (inObj) => {\r\n\tconst qs = new URLSearchParams();\r\n\tObject.entries(inObj).forEach(([key, value]) => value !== undefined ? qs.append(key, value) : null);\r\n\treturn qs.toString();\r\n};\r\n\r\nif(!isNode){\r\n\tqueryParamObject = queryStringToObject(location.search.substr(1));\r\n}\r\n\r\n/**\r\n * This hook returns the currently set query parameters as object and offers a setter function\r\n * to set a new query string.\r\n *\r\n * All components that are hooked to the query parameters will get updated if they change.\r\n * Query params can also be updated along with the path, by calling `navigate(url, queryParams)`.\r\n *\r\n * @returns {array} [queryParamObject, setQueryParams]\r\n */\r\nexport const useQueryParams = () => {\r\n\tconst setUpdate = React.useState(0)[1];\r\n\r\n\tReact.useEffect(() => {\r\n\t\tqueryParamListeners.push(setUpdate);\r\n\r\n\t\treturn () => {\r\n\t\t\tconst index = queryParamListeners.indexOf(setUpdate);\r\n\t\t\tif (index === -1) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tqueryParamListeners.splice(index, 1);\r\n\t\t};\r\n\t}, [setUpdate]);\r\n\r\n\treturn [queryParamObject, setQueryParams];\r\n};\r\n"]},"metadata":{},"sourceType":"script"}